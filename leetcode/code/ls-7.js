// 格雷编码

// 格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。

// 给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。即使有多个不同答案，你也只需要返回其中一种。

// 格雷编码序列必须以 0 开头。

// 示例 1:

// 输入: 2
// 输出: [0,1,3,2]
// 解释:
// 00 - 0
// 01 - 1
// 11 - 3
// 10 - 2

// 对于给定的 n，其格雷编码序列并不唯一。
// 例如，[0,2,3,1] 也是一个有效的格雷编码序列。

// 00 - 0
// 10 - 2
// 11 - 3
// 01 - 1

// 示例 2:

// 输入: 0
// 输出: [0]
// 解释: 我们定义格雷编码序列必须以 0 开头。
//      给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。
//      因此，当 n = 0 时，其格雷编码序列为 [0]。

const grayCode = (n) => {
  let make = n => {
    if (n === 0) {
      return ['0']
    } else if(n === 1) {
      return ['0', '1']
    } else {
      const prevResult = make(n - 1);
      let result = [];
      const max = Math.pow(2, n) - 1;

      for (let i = 0; i < prevResult.length; i++) {
        result[i] = `0${prevResult[i]}`
        result[ max - i] = `1${prevResult[i]}`
      }
      return result;
    }
  }
  return make(n).map(item => {
    return parseInt(item, 2)
  })
}

export default grayCode;

// 总结

// 格雷编码对应的规律
// 0	[0]
// 1	[0,1]
// 2	[0,1,11,10]
// 3	[0,1,11,10,110,111,101,100]
// 4	[0,1,11,10,110,111,101,100,1100,1101,1111,1110,1010,1011,1001,1000]



